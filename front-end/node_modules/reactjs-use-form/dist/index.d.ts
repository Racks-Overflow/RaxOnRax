import { ChangeEvent, FormEvent } from 'react';
/**
 * Reactive form management and input field validation hook
 *
 * @param {object} formModel - initial form model with optional validation function.
 * @param {function} formSubmitCallback - function to run after form validation and submission.
 * @returns {{handleOnChange: function, handleOnSubmit: function, values: object, errors: object, isDisabled: boolean, isSubmitted: boolean}}
 **/
export declare function useForm(formModel: FormModelType, formSubmitCallback: () => void): useFormType;
export declare type useFormType = {
    handleOnChange: HandleOnChangeType;
    handleOnSubmit: HandleOnSubmitType;
    values: ValuesType;
    errors: ErrorsType;
    isSubmitted: boolean;
    isDisabled: boolean;
};
declare type HandleOnChangeType = (event: ChangeEvent<HTMLInputElement>) => void;
declare type HandleOnSubmitType = (event: FormEvent<HTMLFormElement>) => void;
declare type ValidatorFuncType = (value: ValueType, values?: ValuesType) => string;
export declare type FormModelType = {
    [key: string]: FormInputType;
};
export declare type FormInputType = {
    value: ValueType;
    required: boolean;
    validator?: ValidatorFuncType;
};
export declare type ValueType = string;
export declare type ValuesType = {
    [key: string]: ValueType;
};
export declare type ErrorType = {
    hasError: boolean;
    message: string;
};
export declare type ErrorsType = {
    [key: string]: ErrorType;
};
export {};
